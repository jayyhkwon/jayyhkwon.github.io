## 12/02 월요일



DI의 종류

- Field Injection(by @Autowired) (필드 주입)
- Setter Injection (수정자 주입)
- Constructor Injection (생성자 주입)



- 생성자 주입의 장점

  - 1. NPE 방지

       필드 주입과 수정자 주입의 경우

       의존하는 객체를 주입받지 못하여 NPE가 발생할 수 있지만

       생성자 주입은 객체 생성시 의존하는 객체르 주입 받아 이를 방지 할 수 있다.
       

  - 2. 순환참조 방지

  ​			A,B 객체가 서로에게 의존하는 상황이라고 가정하자.

  ​			생성자 주입으로 A객체에서 B객체를, B객체에서 A객체를 주입 받는다면

  ​			애플리케이션이 시작하기 전에 순환참조임을 알려주므로

  ​			스택오버플로우를 사전에 방지할 수 있다.

  

  ```java
  @Service
  public class A {
  
      private B b;
  
      @Autowired
      public A(B b) {
          this.b = b;
      }
      
      public void thisIsAMethod() {
          b.thisIsBMethod();
      }
  }
  
  @Service
  public class B {
  
      private A a;
  
      @Autowired
      public B(A a) {
          this.a = a;
      }
  
      @Override
      public void thisIsBMethod() {
          a.thisIsAMethod();
      }
  }
  ```

  

  - 3. 테스트 코드 작성이 용이하다.

       필드 주입의 경우 스프링 컨테이너에 의존적이므로

       스프링과 관련된 애너테이션을 사용하지 않고는 주입할 방법이 없다.

       그에 비해 생성자 주입은 생성 시 필요한 객체들을 주입해주므로 POJO답게 객체를 사용할 수있다.

  

  #### 상속 vs 조립

  - 상속
    - 상위 클래스를 재사용, 확장하는 방법으로 활용하나 계층구조가 복잡해지면
      - 1. 상위 클래스 변경 어려움
        2. 클래스 증가
        3. 상속 오용 (불필요한 내용까지 상속받음)
        4. 어떤 클래스를 상속받을 지 모호함
           등의 문제가 발생한다.
  - 조립
    - 여러 객체를 묶어서 더 복잡한 기능을 제공
    - 보통 필드로 다른 객체를 참조하는 방식으로 조립
      또는 객체를 필요 시점에 생성/구함

  

  - 상속보다는 조립
    - 상속하기에 앞서 조립으로 풀 수 없는지 검토
    - 진짜 하위 타입인 경우에만 상속 사용



​		

